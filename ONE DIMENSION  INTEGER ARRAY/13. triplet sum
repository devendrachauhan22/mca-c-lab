#include <stdio.h>
#include <stdlib.h>

// Function to compare two integers for qsort
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

// Function to find all triplets that sum up to zero
void findTriplets(int nums[], int n) {
    qsort(nums, n, sizeof(int), compare);

    for (int i = 0; i < n - 2; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue; // Skip duplicate elements
        }
        int left = i + 1;
        int right = n - 1;
        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (sum == 0) {
                printf("[%d, %d, %d]\n", nums[i], nums[left], nums[right]);
                while (left < right && nums[left] == nums[left + 1]) {
                    left++; // Skip duplicate elements
                }
                while (left < right && nums[right] == nums[right - 1]) {
                    right--; // Skip duplicate elements
                }
                left++;
                right--;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }
}

int main() {
    int nums1[] = {-1, 0, 1, 2, -1, -4};
    int n1 = sizeof(nums1) / sizeof(nums1[0]);

    printf("Triplets for first example:\n");
    findTriplets(nums1, n1);

    int nums2[] = {0, 1, 1};
    int n2 = sizeof(nums2) / sizeof(nums2[0]);

    printf("Triplets for second example:\n");
    findTriplets(nums2, n2);

    return 0;
}
